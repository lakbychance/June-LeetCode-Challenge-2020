class RandomizedSet {
public:
    unordered_set<int> rs;
    vector<int>nums;
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(rs.find(val)==rs.end())
        {
            rs.insert(val);
            nums.push_back(val);
            return true;
        }
        return false;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(rs.find(val)!=rs.end())
        {
        rs.erase(val);
        return true;
        }
        return false;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        if(nums.size()>0)
        {
        int index = rand()%nums.size();
        int randomNumber = nums[index];
        while(rs.find(randomNumber)==rs.end())
        {
            index = rand()%nums.size();
            randomNumber = nums[index];
        }
        return randomNumber;
        }
        return 0;
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
